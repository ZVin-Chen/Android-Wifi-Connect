package com.zvin.wificonnect.util;import android.os.Environment;import android.text.TextUtils;import android.util.Log;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.sql.Date;import java.text.SimpleDateFormat;public class LogUtil {	public static final String DEBUG_TAG = "debug--->";	public static final String ERROR_TAG = "error--->";	public static final int VERBOSE = 1;		public static final int DEBUG = 2;		public static final int INFO = 3;		public static final int WARN = 4;		public static final int ERROR = 5;		public static final int NOTHING = 6;	//设置打印级别	public static final int LEVEL = VERBOSE;		public static final String LOG_FILE = Environment.getExternalStorageDirectory().getPath()											+ "/android-wifi-connect.log";	public static final String CRASH_LOG_FILE = Environment.getExternalStorageDirectory().getPath()			+ "/android-wifi-connect-crash.log";			public static void v(String tag,String msg){		if(TextUtils.isEmpty(msg)){			return;		}		if (LEVEL <= VERBOSE) {			Log.v(tag, msg);		}	}		public static void d(String tag,String msg){		if(TextUtils.isEmpty(msg)){			return;		}		if (LEVEL <= DEBUG) {			Log.d(tag, msg);		}	}		public static void i(String tag,String msg){		if(TextUtils.isEmpty(msg)){			return;		}		if (LEVEL <= INFO) {			Log.i(tag, msg);		}	}	public static void w(String tag,String msg){		if(TextUtils.isEmpty(msg)){			return;		}		if (LEVEL <= WARN) {			Log.w(tag, msg);		}	}		public static void e(String tag,String msg){		if(TextUtils.isEmpty(msg)){			return;		}		if (LEVEL <= ERROR) {			Log.e(tag, msg);		}	}		/**	 * 打印日志到手机的sd卡上	 * @param log  要打印的日志信息	 */	public static void writeLog(String log) {		if(TextUtils.isEmpty(log)){			return;		}		if (LEVEL <= DEBUG) {			File file = new File(LOG_FILE);			if (!file.exists()) {				try {					file.createNewFile();				} catch (IOException e) {					System.err.println("Error: " + e.getMessage());				}			}			BufferedWriter out = null;			try {				// Create file				FileWriter fstream = new FileWriter(LOG_FILE, true);				out = new BufferedWriter(fstream);				SimpleDateFormat sdf = new SimpleDateFormat("MM-dd hh:mm:ss  ");				String time = sdf.format(new Date(System.currentTimeMillis()));				out.append(time);				out.append(log);				out.append("\r\n\r\n");			} catch (Exception e) {// Catch exception if any				 System.err.println("Error: " + e.getMessage());			} finally {				try {					if (out != null) {						out.close();					}				} catch (IOException e) {					System.err.println("Error: " + e.getMessage());				}			}		}	}	public static void writeCrashLog(String log) {		if (LEVEL <= DEBUG) {			File file = new File(CRASH_LOG_FILE);			if (!file.exists()) {				try {					file.createNewFile();				} catch (IOException e) {					System.err.println("Error: " + e.getMessage());				}			}			BufferedWriter out = null;			try {				// Create file				FileWriter fstream = new FileWriter(LOG_FILE, true);				out = new BufferedWriter(fstream);				SimpleDateFormat sdf = new SimpleDateFormat("MM-dd hh:mm:ss  ");				String time = sdf.format(new Date(System.currentTimeMillis()));				out.append(time);				out.append(log);				out.append("\r\n\r\n");			} catch (Exception e) {// Catch exception if any				System.err.println("Error: " + e.getMessage());			} finally {				try {					if (out != null) {						out.close();					}				} catch (IOException e) {					System.err.println("Error: " + e.getMessage());				}			}		}	}}